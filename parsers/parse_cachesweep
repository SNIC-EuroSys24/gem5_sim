#!/usr/bin/ruby
require 'fileutils'

$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$time_order_old = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

$time_order = {
    'libquantum' => 0,
    'sjeng' => 1,
    'hmmer' => 2,
    'astar' => 3,
    'h264ref' => 4,
    'bzip2' => 5,
    'Xalan' => 6,
    'gcc' => 7, 
    'mcf' => 8,
    'gobmk' => 9,
}

def findTime(filename,p0,p1)
    currFile = File.open(filename,'r')
    switchregex = /Switched CPUS/
    timingregex = $time_order[p0] > $time_order[p1] ?
        /Exiting @ tick (\d*)\w* because a\w*/ : /count @ Tick (\d*)/ 
    foundtime = false
    foundcpuswitch = false
    time = nil
    currFile.each_line do |line|
        if !foundcpuswitch && line.match(switchregex)!=nil
            foundcpuswitch = true
        end
        unless line.match(timingregex)== nil || !foundcpuswitch
            time =(line.match timingregex)[1]
            foundtime=true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

$schemes = ['tp','open']
def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $schemes.each do |scheme|
        $models.each do |model|
            currOutFile = File.new(outdir+
                                   "/cachesweep_#{scheme}_#{model}.out",'w')

            currOutFile.printf("%s,%s\n",scheme,model)
            currOutFile.printf("%-15s","p0")
            [0,1,2,4].each {|cacheSize| currOutFile.printf("%-15s,",cacheSize)}
            currOutFile.printf("\n")

            $specint.each do |p0|
                currOutFile.printf("%-15s,",p0)
                [0,1,2,4].each do |cacheSize|
                    overheads=[]
                    $specint.each do |p1|
                        inFileName=indir+
                            "/stdout_#{scheme}_#{model}_#{p0}_#{p1}_c#{cacheSize}MB.out"
                        baseFileName=indir+
                            "/stdout_none_#{model}_#{p0}_#{p1}_c#{cacheSize}MB.out"
                        time, foundtime = findTime(inFileName,p0,p1)
                        basetime, foundbase  = findTime(baseFileName,p0,p1)
                        unless foundtime   
                            alternateFileName = indir+
                                "/stdout_#{scheme}_#{model}_#{p1}_#{p0}_c#{cacheSize}MB.out"
                            time, foundtime = findTime(alternateFileName,p0,p1)
                        end
                        unless foundbase
                            alternateBaseName =  indir+
                                "/stdout_none_#{model}_#{p1}_#{p0}_c#{cacheSize}MB.out"
                            basetime,foundbase = findTime(alternateBaseName,p0,p1)
                        end
                        if foundbase && foundtime
                            overheads<<100.0*(time.to_f-basetime.to_f)/basetime.to_f
                        end
                    end
                    if(overheads.length>0)
                        currOutFile.printf("%-15.9f,",
                                           overheads.reduce(:+)/overheads.length)
                    else
                        currOutFile.printf("----------,")
                    end
                end
                currOutFile.printf("\n")
            end
        end
    end
end


if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
