#!/usr/bin/ruby
require 'fileutils'
require 'rubyvis'
require 'csv'

$schemes = %w[ tp fa none ]
$models = %w[ timing detailed ]
$benchmarks = %w[ randmem hardstride ]
$periods = (0..2).map{|x| 10**x }
$caches = [0,1,2,4]
$instructions = 10**8

$l1hit = 2  #cycles
$l2hit = 7  #cycles
$l3hit = 17 #cycles

$regexes = {
    'instructions' => /sim_insts\s*(\d*)/,
    'memir' => /system\.physmem\.num_reads::cpu0\.inst\s*(\d*)/,
    'memdr' => /system\.physmem\.num_reads::cpu0\.data\s*(\d*)/
}

def getStatVal(filename,regex)
    return [nil,false] unless File.exists? filename
    file=File.open(filename,'r')
    file.each_line do |line|
        if line.match(regex)!=nil
            file.close()
            return [line.match(regex)[1].to_f,true]
        end
    end
    file.close()
    [nil,false]
end

def makeCachestats(indir)
    Dir.chdir(indir)
    stats = $regexes.keys

    data = $schemes.inject({}){|i,sc|
        i[sc]=$models.inject({}){|j,m|
            j[m]=$caches.inject({}){|k,c|
                k[c]= stats.inject({}){|l,st|
                    l[st]=[]
                    l }
                k } 
            j } 
        i }

    $schemes.product($models,$periods,$caches).each do |scheme,model,period,cache|
        statVals = Hash.new()
        statsFound = Hash.new()

        inFileName=indir+
            "/#{scheme}_#{model}_randmem#{period}_c#{cache}MB_stats.txt"
        stats.each do |stat|
            statVals[stat], statsFound[stat] =
                getStatVal(inFileName,$regexes[stat])
            if statsFound[stat]
                data[scheme][model][cache][stat] << statVals[stat]
            else
                puts "#{scheme} #{model} randmem#{period} #{cache} #{stat} not found"
                data[scheme][model][cache][stat] << 0
            end
        end

    end

    $schemes.product($models,$caches).each do |scheme,model,cache|
        statVals = Hash.new()
        statsFound = Hash.new()

        inFileName=indir+
            "/#{scheme}_#{model}_hardstride1_c#{cache}MB_stats.txt"
        stats.each do |stat|
            statVals[stat], statsFound[stat] =
                getStatVal(inFileName,$regexes[stat])
            if statsFound[stat]
                data[scheme][model][cache][stat] << statVals[stat]
            else
                puts "#{scheme} #{model} hardstride1 #{cache} #{stat} not found"
                data[scheme][model][cache][stat] << 0
            end
        end

    end

    data
end

def memAccessPerInst(data,outdir)
    $schemes.product($models).each do |scheme,model|
        mpiOutFile = File.new( outdir + "/#{scheme}_#{model}_mpi.csv", "w" )
        mpiOutFile.printf( "%s,%s\n", scheme, model)
        mpiOutFile.printf("%-18s,","cache" )
        $bench_configs = $periods.map{|p| "randmem#{p}"} << "hardstride1"
        $bench_configs.each {|bench| mpiOutFile.printf("%-18s,",bench)}
        mpiOutFile.printf("\n")
        $caches.each do |cache|
            memir = data[scheme][model][cache]['memir']
            memdr = data[scheme][model][cache]['memdr']
            memr  = [memir,memdr].transpose.map{|x| x.reduce(:+)}
            #divide misses by kiloinstruction count
            memperkin = memr.map{|x| x * 1000.0 / $instructions }
            mpiOutFile.printf("%-18s,",cache)
            memperkin.each {|bench| mpiOutFile.printf("%-18.13f,",bench)}
            mpiOutFile.printf("\n") 
        end
    end
end

if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    stats=makeCachestats(File.expand_path(result_dir))
    memAccessPerInst(stats,File.expand_path(perfrep_dir))

end
