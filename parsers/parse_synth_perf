#!/usr/bin/ruby
require 'fileutils'
$schemes = %w[ fa tp ]
$models = %w[ detailed ]
$benchmarks = %w[ randmem hardstride ]
$cacheSizes = [4]
$periods = (0..2).map{|x| 10**x }

$tests = [
    #"randmem100",
    #"randmem10",
    "randmem1",
    "hardstride1",
    "nothing"
]

$p0tls= [64,96,128,192,256]

def findTime( filename, p0, p1 )
    currFile = File.open(filename,'r')
    timingregex1 = /Exiting @ tick (\d*) [\w\s]* thread in cpu0\w*/
    timingregex2 = /a thread in cpu0 [\w\s]* count @ (\d*)/
    time=nil
    foundtime = false
    currFile.each_line do |line|
        if line.match(timingregex1) != nil
            time = (line.match timingregex1)[1]
            foundtime = true
            break
        end
        if line.match(timingregex2) != nil
            time = (line.match timingregex2)[1]
            foundtime = true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $schemes.product($models).each do |scheme,model|
        currOutFile = File.new(outdir+
            "/perfsynth_#{scheme}_#{model}.csv",'w')

        currOutFile.printf("%s,%s\n",scheme,model)
        currOutFile.printf("%-18s","bench")
        $tests.each {|test| currOutFile.printf("%-18s,",test)}
        currOutFile.printf("\n")

        $tests.product($p0tls).each do |p0,p0tl|
            currOutFile.printf("%-18s,","#{p0} tl#{p0tl}")
            $cacheSizes.each do |c|
                $tests.each do |p1|
                    inFileName=indir+
                        "/stdout_#{scheme}_#{model}_#{p0}tl#{p0tl}_#{p1}tl64_c#{c}MB.out"
                    baseFileName=indir+
                        "/stdout_none_#{model}_#{p0}tl#{p0tl}_#{p1}tl64_c#{c}MB.out"
                    time, foundtime = findTime( inFileName, p0, p1 )
                    basetime, foundbase  = findTime( baseFileName, p0, p1 )
                    if foundtime && foundbase
                        t = time.to_f
                        b = basetime.to_f
                        result = 100 * (t-b)/b
                        currOutFile.printf("%-18.9f,",result)
                    else
                        currOutFile.printf("------------------,")
                    end
                end
            end
            currOutFile.printf("\n")
        end
    end
end

if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
