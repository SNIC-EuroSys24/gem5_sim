#!/usr/bin/ruby
require 'fileutils'
require 'parallel'

$schemes = ['none','open','tp','ft']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$p1plus = ['h264ref']

$time_order_old = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

$time_order = {
    'libquantum' => 0,
    'sjeng' => 1,
    'hmmer' => 2,
    'astar' => 3,
    'h264ref' => 4,
    'bzip2' => 5,
    'Xalan' => 6,
    'gcc' => 7, 
    'mcf' => 8,
    'gobmk' => 9,
}

def findTime(filename,p0,p1)
    currFile = File.open(filename,'r')
    switchregex = /Switched CPUS/
    timingregex = $time_order[p0] > $time_order[p1] ?
        /Exiting @ tick (\d*)\w* because a\w*/ : /count @ Tick (\d*)/ 
    foundtime = false
    foundcpuswitch = false
    time = nil
    currFile.each_line do |line|
        if !foundcpuswitch && line.match(switchregex)!=nil
            foundcpuswitch = true
        end
        unless line.match(timingregex)== nil || !foundcpuswitch
            time =(line.match timingregex)[1]
            foundtime=true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

$specedges = ["astar","gobmk","mcf","sjeng"]

def threadscale_results(indir,outdir)
    Dir.chdir(indir)
    $models.each do |model|
        currOutFile = File.new(outdir+
                               "/threadscale_tp_#{model}.out",'w')
        currOutFile.printf("%s,%s\n","model",model)
        currOutFile.printf("%-15s , %-15s, %-15s, %-15s\n",
                           "workload","2 Threads","3 Threads", "4 Threads")
        $specint.each do |p0|
            overheads2=[]
            overheads3=[]
            overheads4=[]
            $specint.each do |p1|
                #2 Threads
                inFileName = indir+"/stdout_tp_#{model}_#{p0}_#{p1}.out"
                baseFileName = indir+"/stdout_none_#{model}_#{p0}_#{p1}.out"
                time, foundtime = findTime(inFileName,p0,p1)
                basetime, foundbase  = findTime(baseFileName,p0,p1)
                if foundbase && foundtime
                    overheads2<<100.0*(time.to_f-basetime.to_f)/basetime.to_f
                end

                #3 Threads
                inFileName = indir+"/stdout_tp_#{model}_#{p0}_#{p1}_#{p1}.out"
                baseFileName = indir+"/stdout_none_#{model}_#{p0}_#{p1}_#{p1}.out"
                time, foundtime = findTime(inFileName,p0,p1)
                basetime, foundbase  = findTime(baseFileName,p0,p1)
                if foundbase && foundtime
                    overheads3<<100.0*(time.to_f-basetime.to_f)/basetime.to_f
                end

                #4 Threads
                inFileName = indir+"/stdout_tp_#{model}_#{p0}_#{p1}_#{p1}_#{p1}.out"
                baseFileName = indir+"/stdout_none_#{model}_#{p0}_#{p1}_#{p1}_#{p1}.out"
                time, foundtime = findTime(inFileName,p0,p1)
                basetime, foundbase  = findTime(baseFileName,p0,p1)
                if foundbase && foundtime
                    overheads4<<100.0*(time.to_f-basetime.to_f)/basetime.to_f
                end

            end
            avg2 = overheads2.reduce(:+)/overheads2.length 
            avg3 = overheads3.reduce(:+)/overheads3.length
            avg4 = overheads4.reduce(:+)/overheads4.length 
            currOutFile.printf("%-15s, %-15.9f, %-15.9f, %-15.9f\n",
                               p0,avg2,avg3,avg4)

        end
    end
end

if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    threadscale_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
