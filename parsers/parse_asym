#!/usr/bin/ruby
require 'fileutils'
$schemes = %w[fa tp]
$models = %w[ timing detailed ]
$benchmarks = %w[ randmem hardstride ]
$cacheSizes = [0, 1, 2, 4]
$periods = (0..2).map{|x| 10**x }

$test_order = {
    "randmem100"  => 0,
    "randmem10"   => 1,
    "randmem1"    => 2,
    "hardstride1" => 3
}

def findTime( filename, p0, p1 )
    currFile = File.open(filename,'r')
    timingregex = $test_order[p0] > $test_order[p1] ?
        /Exiting @ tick (\d*)\w* because a\w*/ :
        /count @ Tick (\d*)/
    time=nil
    foundtime = false
    currFile.each_line do |line|
        if line.match(timingregex) != nil
            time = (line.match timingregex)[1]
            foundtime = true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $schemes.product($models).each do |scheme,model|
        currOutFile = File.new(outdir+
                               "/perfsynth_#{scheme}_#{model}.out",'w')

        currOutFile.printf("%s,%s\n",scheme,model)
        currOutFile.printf("%-18s","bench")
        $cacheSizes.each {|cacheSize| currOutFile.printf("%-18s,",cacheSize)}
        currOutFile.printf("\n")

        $bench_configs = $test_order.keys

        $bench_configs.each do |p0|
            currOutFile.printf("%-18s,",p0)
            $cacheSizes.each do |c|
                overheads = []
                $bench_configs.each do |p1|
                    inFileName=indir+
                        "/stdout_#{scheme}_#{model}_#{p0}_#{p1}_c#{c}MB.out"
                    baseFileName=indir+
                        "/stdout_none_#{model}_#{p0}_#{p1}_c#{c}MB.out"
                    time, foundtime = findTime( inFileName, p0, p1 )
                    basetime, foundbase  = findTime( baseFileName, p0, p1 )
                    if foundtime && foundbase
                        t = time.to_f
                        b = basetime.to_f
                        overheads << 100 * (t-b)/b
                    end
                end
                if overheads.length > 0
                    result = overheads.reduce(:+)/overheads.length
                    currOutFile.printf("%-18.9f,",result)
                else
                    currOutFile.printf("------------------,")
                end
            end
            currOutFile.printf("\n")
        end
    end
end

if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
