#!/usr/bin/ruby
require 'fileutils'

$schemes = ['none','ft','tp','open']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$time_order_old = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

$time_order = {
    'libquantum' => 0,
    'sjeng' => 1,
    'hmmer' => 2,
    'astar' => 3,
    'h264ref' => 4,
    'bzip2' => 5,
    'Xalan' => 6,
    'gcc' => 7, 
    'mcf' => 8,
    'gobmk' => 9,
}

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $schemes.each do |scheme|
        $models.each do |model|
            currOutFile = File.new(outdir+
                                   "/cachesweep_#{scheme}_#{model}.out",'w')
            currOutFile.printf("%s,%s\n",scheme,model)
            currOutFile.printf("%-15s , %-15s, %s\n","p0","L3 Size","cycles")
            $specint.each do |p0|
                (0..4).each do |cacheSize|
                    currInFile = File.open(
                        indir+"/stdout_#{scheme}_#{model}_#{p0}_#{p0}_c#{cacheSize}MB.out",'r')
                    foundTime = false
                    foundCPUSwitch = false
                    currInFile.each_line do |line|

                        switchRegex = /Switched CPUS/
                        if !foundCPUSwitch && line.match(switchRegex)!=nil
                            foundCPUSwitch = true
                        end

                        timingRegex = /Exiting @ tick (\d*)\w* because a\w*/
                        unless line.match(timingRegex)==nil || !foundCPUSwitch
                            time =(line.match timingRegex)[1]
                            currOutFile.printf("%-15s , %-15s , %d \n",
                                               p0,cacheSize,time)
                            foundTime = true
                        end

                    end
                    unless foundTime
                        currOutFile.printf("%-15s , %-15s , %s \n",
                                      p0, cacheSize, "---------------")
                    end
                end
            end
        end
    end

end


if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
