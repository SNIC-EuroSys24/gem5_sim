#!/usr/bin/ruby
require 'fileutils'
require 'parallel'

$schemes = ['none','tp','ft']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$time_order = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

def findTime(filename,p0,p1)
    currFile = File.open(filename,'r')
    switchregex = /Switched CPUS/
    timingregex = $time_order[p0] > $time_order[p1] ?
        /Exiting @ tick (\d*)\w* because a\w*/ : /count @ Tick (\d*)/ 
    foundtime = false
    foundcpuswitch = false
    time = nil
    currFile.each_line do |line|
        if !foundcpuswitch && line.match(switchregex)!=nil
            foundcpuswitch = true
        end
        unless line.match(timingregex)== nil || !foundcpuswitch
            time =(line.match timingregex)[1]
            foundtime=true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

def getAvg(filename,p0,p1)
    currFile = File.open(filename,'r')
    avgregex = /avg,(\d*\.\d*)/ 
    foundtime = false
    time=nil
    currFile.each_line do |line|
        unless line.match(avgregex)==nil
            time =(line.match avgregex)[1]
            time = time.to_f
            foundtime=true
            break
        end
    end
    currFile.close()
    [time,foundtime]
end

def getMaxLat(filename,p0,p1)
    currFile = File.open(filename,'r')
    maxregex = /(\d*),\d*/ 
    foundtime = false
    time=nil
    lines = []
    lines = IO.readlines(filename)
    unless lines.length<2 || lines[-2].match(maxregex)==nil
        time =(lines[-2].match maxregex)[1]
        time = time.to_i
        foundtime=true
    end
    currFile.close()
    [time,foundtime]
end

def make_maxlat_results(indir,outdir)
    Dir.chdir(indir)
    $models.each do |model|
        currOutFile = File.new(outdir+"/maxlat_tp_#{model}.out",'w')

        currOutFile.printf("%-15s,","turn length")
        $specint.each {|b| currOutFile.printf("%-15s,",b)}
        currOutFile.printf("\n")

        [-1,0].push(*(6..16)).each do |tl|
            currOutFile.printf("%-15d,",tl) unless tl==-1
            currOutFile.printf("%-15s,","baseline") if tl==-1
            $specint.each do |p0|
                overheads=[]
                $specint.each do |p1|
                    if tl == -1
                        inFileName = indir+
                            "/latency_t0_none_#{model}_#{p0}_#{p1}_c4MB.csv"
                    else
                        inFileName = indir+
                            "/latency_t0_tp_#{model}_#{p0}_#{p1}_tl_#{tl}.csv"
                    avgLat, foundtime = getMaxLat(inFileName,p0,p1)
                    end
                    overheads << avgLat if foundtime
                end
                if(overheads.length>0)
                    currOutFile.printf("%-15d,",
                                       overheads.reduce(:+)/overheads.length)
                else
                    currOutFile.printf("---------------,")
                end
            end
            currOutFile.printf("\n")
        end
    end
end

def make_avglat_results(indir,outdir)
    Dir.chdir(indir)
    $models.each do |model|
        currOutFile = File.new(outdir+"/avglat_tp_#{model}.out",'w')

        currOutFile.printf("%-15s,","turn length")
        $specint.each {|b| currOutFile.printf("%-15s,",b)}
        currOutFile.printf("\n")

        [-1,0].push(*(6..16)).each do |tl|
            currOutFile.printf("%-15d,",tl) unless tl==-1
            currOutFile.printf("%-15s,","baseline") if tl==-1
            $specint.each do |p0|
                overheads=[]
                $specint.each do |p1|
                    if tl == -1
                        inFileName = indir+
                            "/latency_t0_none_#{model}_#{p0}_#{p1}_c4MB.csv"
                    else
                        inFileName = indir+
                            "/latency_t0_tp_#{model}_#{p0}_#{p1}_tl_#{tl}.csv"
                    avgLat, foundtime = getAvg(inFileName,p0,p1)
                    end
                    overheads << avgLat if foundtime
                end
                if(overheads.length>0)
                    currOutFile.printf("%-15.9f,",
                                       overheads.reduce(:+)/overheads.length)
                else
                    currOutFile.printf("---------------,")
                end
            end
            currOutFile.printf("\n")
        end
    end
end

if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    avglatresults_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? avglatresults_dir.path
        FileUtils.mkdir_p avglatresults_dir.path
    end

    maxlatresults_dir = Dir.new(File.expand_path ARGV[2].to_s)
    unless File.directory? maxlatresults_dir.path
        FileUtils.mkdir_p maxlatresults_dir.path
    end

    make_avglat_results(File.expand_path(result_dir),
                        File.expand_path(avglatresults_dir))
    make_maxlat_results(File.expand_path(result_dir),
                        File.expand_path(avglatresults_dir))
end

