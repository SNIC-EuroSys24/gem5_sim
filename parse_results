#!/usr/bin/ruby
require 'fileutils'
require 'parallel'

$schemes = ['none','tp','ft']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    'omnetpp',
    'perlbench',
    'sjeng',
    'Xalan',
]

def make_t0_files indir
    oldDir = Dir.pwd
    Dir.chdir(File.expand_path indir.path)
    Parallel.each(Dir.glob("{none,tp,ft}*"),:in_threads=>4) do |rtfile|
        rtfile_noex = (rtfile.match /([\w\s]*)\.out/)[1]
        system "cat #{rtfile} | grep \"Thread: 0\" > #{rtfile_noex}_t0.out"
    end
    Dir.chdir(oldDir)
end

def make_security_reports(indir,outdir)
    oldDir = Dir.pwd
    Dir.chdir(indir.path)
    Parallel.each($schemes,:in_threads=>3) do |scheme|
        $models.each do |model|
            currFile = File.new(outdir.path+
                                "/security_#{scheme}_#{model}.out",'w')
            $specint.each do |p0bench|
                currFile.puts("#{p0bench}:")
                globber = "#{scheme}_#{model}_#{p0bench}_"+
                    "{#{$specint.join(',')}}*"
                Dir.glob(globber).repeated_permutation(2).to_a.each do |fi,fj|
                    p1bench_match_i = 
                        (fi.match /\w*(#{$specint.join('|')})_t0\.out/)
                    p1bench_match_j =
                    (fj.match /\w*(#{$specint.join('|')})_t0\.out/)
                    next if p1bench_match_i == nil || p1bench_match_j == nil
                    unless TimeArr.new(fi) == TimeArr.new(fj)
                        p1i = p1bench_match_i[1]
                        p1j = p1bench_match_j[1]
                        currFile.printf("%-11s doesn't match %s\n",p1i,p1j)
                    end
                end
            end
        end
    end
    Dir.chdir(oldDir)
end

class TimeArr < Array
    def initialize(filename)
        File.open(filename,'r').each_line do |line|
            time_regex = /\w*Return time: (\d*)/
            unless line.match(time_regex) == nil
                self<< (line.match time_regex)[1]
            end
        end
    end

    def ==(other)
        a = other.length < self.length ? other : self
        b = other.length < self.length ? self  : other
        for i in (0 .. a.length-1)
            return false if a[i]!=b[i]
        end
    end

end

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    Parallel.each($schemes,:in_threads=>3) do |scheme|
        $models.each do |model|
            currOutFile = File.new(outdir+
                                   "/performance_#{scheme}_#{model}.out",'w')
            $specint.each do |b|
                currInFile = File.open(indir+
                                       "/stdout_#{scheme}_#{model}_#{b}_#{b}.out",'r')
                currInFile.each_line do |line|
                    timingRegex = /Exiting @ tick (\d*)\w*/
                    unless line.match(timingRegex)== nil
                        time =(line.match timingRegex)[1]
                        currOutFile.printf("%-15s %e cycles\n",b,time)
                    end
                end
            end
        end
    end

end


if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    secrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? secrep_dir.path
        FileUtils.mkdir_p secrep_dir.path
    end

    perfrep_dir = Dir.new(File.expand_path ARGV[2].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    #make_t0_files(result_dir)
    #make_security_reports(result_dir,secrep_dir)
    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end

