#!/usr/bin/ruby

require 'fileutils'

$gem5home = Dir.new(Dir.pwd)
specint_dir = (Dir.pwd+"/benchmarks/spec2k6bin/specint")
unless File.directory? File.expand_path(Dir.pwd+"/scriptgen")
    FileUtils.mkdir_p File.expand_path(Dir.pwd+"/scriptgen")
end
unless File.directory? File.expand_path(Dir.pwd+"/tl_results")
    FileUtils.mkdir_p File.expand_path(Dir.pwd+"/tl_results")
end
$scriptgen_dir = Dir.new(Dir.pwd+"/scriptgen")

#Gem5 options
$fastforward = 10**9
$maxtinsts = 10**8
$maxtick = 2*10**15 
$cpus = %w[detailed timing]
$cacheSizes = [0,1,2,4]
$p0periods = [64,96,128,192,256]

#dramsim options
$device = "DDR3_micron_16M_8B_x8_sg15.ini"
$schemes = %w[tp none fa]
$turnlengths = [0] + (7..9).to_a

$specinvoke = { 
    #    "perlbench"  => "'#{specint_dir}/perlbench -I#{specint_dir}/perldepends -I#{specint_dir}/lib #{specint_dir} pack.pl'",
    "bzip2"      => "'#{specint_dir}/bzip2 #{specint_dir}/input.source 280'",
    "gcc"        => "'#{specint_dir}/gcc #{specint_dir}/200.in -o results/200.s'",
    "mcf"        => "'#{specint_dir}/mcf #{specint_dir}/inp.in'",
    "gobmk"      => "'#{specint_dir}/gobmk --quiet --mode gtp --gtp-input #{specint_dir}/13x13.tst'",
    "hmmer"      => "'#{specint_dir}/hmmer #{specint_dir}/nph3.hmm #{specint_dir}/swiss41'",
    "sjeng"      => "'#{specint_dir}/sjeng #{specint_dir}/ref.txt'",
    "libquantum" => "'#{specint_dir}/libquantum 1397 8'",
    "h264ref"    => "'#{specint_dir}/h264ref -d #{specint_dir}/foreman_ref_encoder_baseline.cfg'",
    #    "omnetpp"    => "'#{specint_dir}/omnetpp #{specint_dir}/omnetpp.ini'",
    "astar"      => "'#{specint_dir}/astar #{specint_dir}/BigLakes2048.cfg'",
    "Xalan"      => "'#{specint_dir}/Xalan -v #{specint_dir}/t5.xml #{specint_dir}/xalanc.xsl'"  
}

$specint = $specinvoke.keys.sort

def sav_script( cpu, scheme, cacheSize, diffperiod,
                p0, tl0, p1=nil, tl1=6, p2=nil, tl2=6, p3=nil, tl3=6
              ) 
    filename = "#{scheme}_#{cpu}_#{p0}tl#{tl0}"
    filename += "_#{p1}tl#{tl1}" unless p1.nil?
    filename += "_#{p2}tl#{tl2}" unless p2.nil?
    filename += "_#{p3}tl#{tl3}" unless p3.nil?
    filename += "_c#{cacheSize}MB"
    
    numpids  = 1
    numpids += 1 unless p1.nil?
    numpids += 1 unless p2.nil?
    numpids += 1 unless p3.nil?

    script = File.new($scriptgen_dir.path+"/run_#{filename}","w+")
    script.puts("#!/bin/bash")
    script.puts("build/ARM/gem5.fast \\")
    script.puts("    --stats-file=#{filename}_stats.txt \\")
    script.puts("    configs/dramsim2/dramsim2_se.py \\")
    script.puts("    --cpu-type=#{cpu} \\")
    script.puts("    --caches \\")
    script.puts("    --l2cache \\")
    unless cacheSize == 0
        script.puts("    --l3cache \\")
        script.puts("    --l3_size=#{cacheSize}MB\\")
    end
    script.puts("   --fixaddr\\") if scheme == "fa"
    script.puts("    --fast-forward=#{$fastforward} \\")
    script.puts("    --fixaddr\\") if scheme == "fa"
    script.puts("    --maxinsts=#{$maxtinsts} \\")
    script.puts("    --maxtick=#{$maxtick} \\")
    script.puts("    --dramsim2 \\")
    script.puts("    --tpturnlength=#{tl0} \\") unless tl0==0 || diffperiod
    script.puts("    --devicecfg="+
                "./ext/DRAMSim2/ini/#{$device} \\")
    if tl0== 0
        script.puts("    --systemcfg=./ext/DRAMSim2/system_ft.ini \\")
    else
        script.puts("    --systemcfg=./ext/DRAMSim2/system_#{scheme}.ini \\")
    end
    script.puts("    --outputfile=/dev/null \\")
    script.puts("    --numpids=#{numpids} \\")
    script.puts("    --p0=#{$specinvoke[p0]}\\")
    script.puts("    --p1=#{$specinvoke[p1]}\\") unless p1.nil?
    script.puts("    --p2=#{$specinvoke[p2]}\\") unless p2.nil?
    script.puts("    --p3=#{$specinvoke[p3]}\\") unless p3.nil?
    if diffperiod
        script.puts("    --diffperiod \\")
        script.puts("    --p0period=#{tl0} \\")
        script.puts("    --p1period=#{tl1} \\")
        script.puts("    --p2period=#{tl2} \\")
        script.puts("    --p3period=#{tl3} \\")
    end
    script.puts("    > results/stdout_#{filename}.out")
    script_abspath = File.expand_path(script.path)
    script.close
    system "qsub -wd #{$gem5home.path} #{script_abspath}"
end

#------------------------------------------------------------------------------
# Unoptimized Runs
#------------------------------------------------------------------------------
#$schemes = %w[tp none]
#
##Cache Sweeping
#Dir.chdir( specint_dir )
#$cpus.product( $schemes,  $cacheSizes ).each do |cpu, scheme, cacheSize|
#    $specint.product( $specint ).each do|p0, p1|
#        sav_script( cpu, scheme, cacheSize, false, p0, 6, p1 )
#    end
#end
#
##Turn Length Sweeping
#Dir.chdir(specint_dir)
#$cpus.product( $turnlengths ).each do |cpu, turnlength|
#    $specint.product( $specint ).each do |p0,p1|
#        sav_script( cpu, "tp", 4, false, p0, turnlength, p1)
#    end
#    $specint.each do |p0|
#        sav_script( cpu, "tp", 4, false, p0, turnlength )
#    end
#end
#
##Thread Scaling
#$cpus = %w[ detailed ]
#$cpus.product( $schemes ).each do |cpu, scheme|
#    $specint.product( $specint ).each do |p0,other|
#        sav_script( cpu, scheme, 4, false, p0, 6, other, 6, other, 6 )
#        sav_script( cpu, scheme, 4, false, p0, 6, other, 6, other, 6, other, 6 )
#    end
#end

#------------------------------------------------------------------------------
# Optimized Runs
#------------------------------------------------------------------------------
$schemes = %w[fa]
$cpus = %w[ detailed ]

#Thread Scaling (Just FA)
$cpus.product( $schemes ).each do |cpu, scheme|
    $specint.product( $specint ).each do |p0,other|
        sav_script( cpu, scheme, 4, false, p0, 6, other, 6 )
        sav_script( cpu, scheme, 4, false, p0, 6, other, 6, other, 6 )
        sav_script( cpu, scheme, 4, false, p0, 6, other, 6, other, 6, other, 6 )
    end
end

#Thread Scaling
#$cpus.product( $schemes ).each do |cpu, scheme|
#    $specint.product( $specint, $p0periods ).each do |p0,other,tl0|
#        sav_script( cpu, scheme, 4, true, p0, tl0, other, 64, other, 64 )
#        sav_script( cpu, scheme, 4, true, p0, tl0, other, 64, other, 64, other, 64)
#    end
#end
