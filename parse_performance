#!/usr/bin/ruby
require 'fileutils'

$schemes = ['none','open','tp','ft']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$time_order_old = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

$time_order = {
    'libquantum' => 0,
    'sjeng' => 1,
    'hmmer' => 2,
    'astar' => 3,
    'h264ref' => 4,
    'bzip2' => 5,
    'Xalan' => 6,
    'gcc' => 7, 
    'mcf' => 8,
    'gobmk' => 9,
}

def findTime(inFile,p0,p1)
    switchregex = /Switched CPUS/
    timingregex = $time_order[p0] > $time_order[p1] ?
        /Exiting @ tick (\d*)\w* because a\w*/ : /count @ Tick (\d*)/ 
    foundtime = false
    foundcpuswitch = false
    time = nil
    inFile.each_line do |line|
        if !foundcpuswitch && line.match(switchregex)!=nil
            foundcpuswitch = true
        end
        unless line.match(timingregex)== nil || !foundcpuswitch
            time =(line.match timingregex)[1]
            foundtime=true
            break
        end
    end
    [time,foundtime]
end

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $schemes.each do |scheme|
        $models.each do |model|
            currOutFile = File.new(outdir+
                                   "/performance_#{scheme}_#{model}.out",'w')
            currOutFile.printf("%s,%s\n",scheme,model)
            currOutFile.printf("%-15s , %-15s , %s\n","p0","p1","cycles")
            $specint.each do |p0|
                $specint.each do |p1|
                    currInFile = File.open(
                        indir+"/stdout_#{scheme}_#{model}_#{p0}_#{p1}.out",'r')
                    time,foundtime = findTime(currInFile,p0,p1)
                    if foundtime
                        currOutFile.printf("%-15s , %-15s , %d \n",
                                       p0,p1,time)
                    else
                        alternateFile = File.open(
                            indir+"/stdout_#{scheme}_#{model}_#{p1}_#{p0}.out",'r')
                        time,foundtime = findTime(alternateFile,p0,p1)
                        currOutFile.printf("%-15s , %-15s , %d \n",
                                       p0,p1,time) if foundtime
                        currOutFile.printf("%-15s , %-15s , %s \n",p0, p1,
                                           "---------------") unless foundtime
                    end
                end
            end
        end
    end
end


if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end
