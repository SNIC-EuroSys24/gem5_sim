#!/usr/bin/ruby
require 'fileutils'
require 'parallel'

$schemes = ['none','tp','ft']
$models = ['timing','detailed']
$specint = [
    'astar',
    'bzip2',
    'gcc',
    'gobmk',
    'h264ref',
    'hmmer',
    'libquantum',
    'mcf',
    #    'omnetpp',
    #    'perlbench',
    'sjeng',
    'Xalan',
]

$time_order = {
    'libquantum' => 0,
    'hmmer' => 1,
    'astar' => 2,
    'gcc' => 3,
    'h264ref' => 4,
    'bzip2' => 5, 
    'gobmk' => 6,
    'mcf' => 7,
    'Xalan' => 8,
    'sjeng' => 9,
}

def make_timing_results(indir,outdir)
    Dir.chdir(indir)
    $models.each do |model|
        currOutFile = File.new(outdir+"/performance_tp_#{model}.out",'w')

        currOutFile.printf("%-15s, ","turn length")
        $specint.each {|b| currOutFile.printf("%-15s, ",b)}
        currOutFile.printf("\n")

        (8..24).each do |tl|
            currOutFile.printf("%-15d, ",tl)
            $specint.each do |p0|
                currInFile = File.open(
                    indir+"/stdout_tp_#{model}_#{p0}_tl_#{tl}.out",'r')
                currInFile.each_line do |line|
                    timingRegex = /Exiting @ tick (\d*)\w*/
                    unless line.match(timingRegex)== nil
                        time =(line.match timingRegex)[1]
                        currOutFile.printf("%-15d, ",time)
                    end
                end
            end
            currOutFile.printf("\n")
        end
    end
end


if __FILE__ == $0
    result_dir = Dir.new(File.expand_path ARGV[0].to_s)

    perfrep_dir = Dir.new(File.expand_path ARGV[1].to_s)
    unless File.directory? perfrep_dir.path
        FileUtils.mkdir_p perfrep_dir.path
    end

    make_timing_results(File.expand_path(result_dir),
                        File.expand_path(perfrep_dir))
end

