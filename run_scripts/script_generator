#!/usr/bin/ruby

module RunScripts
require 'fileutils'

$gem5home = Dir.new(Dir.pwd)
specint_dir = (Dir.pwd+"/benchmarks/spec2k6bin/specint")
unless File.directory? File.expand_path(Dir.pwd+"/scriptgen")
    FileUtils.mkdir_p File.expand_path(Dir.pwd+"/scriptgen")
end
unless File.directory? File.expand_path(Dir.pwd+"/tl_results")
    FileUtils.mkdir_p File.expand_path(Dir.pwd+"/tl_results")
end
$scriptgen_dir = Dir.new(Dir.pwd+"/scriptgen")

#Gem5 options
$fastforward = 10**9
$maxtinsts = 10**8
$maxtick = 2*10**15 
$cpus = %w[detailed timing]
$cacheSizes = [0,1,2,4]
$p0periods = [64,96,128,192,256]

#dramsim options
$device = "DDR3_micron_16M_8B_x8_sg15.ini"
$schemes = %w[tp none fa]
$turnlengths = [0] + (7..9).to_a
$p0periods = [64,96,128,192,256]

#benchmarks
$specinvoke = { 
    #    "perlbench"  => "'#{specint_dir}/perlbench -I#{specint_dir}/perldepends -I#{specint_dir}/lib #{specint_dir} pack.pl'",
    "bzip2"      => "'#{specint_dir}/bzip2 #{specint_dir}/input.source 280'",
    "gcc"        => "'#{specint_dir}/gcc #{specint_dir}/200.in -o results/200.s'",
    "mcf"        => "'#{specint_dir}/mcf #{specint_dir}/inp.in'",
    "gobmk"      => "'#{specint_dir}/gobmk --quiet --mode gtp --gtp-input #{specint_dir}/13x13.tst'",
    "hmmer"      => "'#{specint_dir}/hmmer #{specint_dir}/nph3.hmm #{specint_dir}/swiss41'",
    "sjeng"      => "'#{specint_dir}/sjeng #{specint_dir}/ref.txt'",
    "libquantum" => "'#{specint_dir}/libquantum 1397 8'",
    "h264ref"    => "'#{specint_dir}/h264ref -d #{specint_dir}/foreman_ref_encoder_baseline.cfg'",
    #    "omnetpp"    => "'#{specint_dir}/omnetpp #{specint_dir}/omnetpp.ini'",
    "astar"      => "'#{specint_dir}/astar #{specint_dir}/BigLakes2048.cfg'",
    "Xalan"      => "'#{specint_dir}/Xalan -v #{specint_dir}/t5.xml #{specint_dir}/xalanc.xsl'"  
}
$specint = $specinvoke.keys.sort

$synthinvoke = {
    "hardstride1" => "#{$synthbench_dir}hardstride -d #{$duration} -p 1",
    "randmem1"    => "#{$synthbench_dir}randmem -d #{$duration} -p 1",
    #"randmem10"   => "#{$synthbench_dir}randmem -d #{$duration} -p 10",
    #"randmem100"  => "#{$synthbench_dir}randmem -d #{$duration} -p 100",
    "nothing"     => "#{$synthbench_dir}nothing"
}
$synthb = $synthinvoke.keys.sort

def sav_script( cpu, scheme, p0, options = {} ) 

    options = {
        cacheSize: 4,
        p1: nil,
        p2: nil,
        p3: nil,
        tl0: 6,
        tl1: 6,
        tl2: 6,
        tl3: 6,
        diffperiod: false,
        l3config: "shared"
    }.merge options
    cacheSize  = options[:cacheSize]
    p1         = options[:p1]
    p2         = options[:p2]
    p3         = options[:p3]
    tl0        = options[:tl0]
    tl1        = options[:tl1]
    tl2        = options[:tl2]
    tl3        = options[:tl3]
    diffperiod = options[:diffperiod]
    l3config   = options[:shared]

    filename = "#{scheme}_#{cpu}_#{p0}tl#{tl0}"
    filename += "_#{p1}tl#{tl1}" unless p1.nil?
    filename += "_#{p2}tl#{tl2}" unless p2.nil?
    filename += "_#{p3}tl#{tl3}" unless p3.nil?
    filename += "_c#{cacheSize}MB"
    
    numpids  = 1
    numpids += 1 unless p1.nil?
    numpids += 1 unless p2.nil?
    numpids += 1 unless p3.nil?

    script = File.new($scriptgen_dir.path+"/run_#{filename}","w+")
    script.puts("#!/bin/bash")
    script.puts("build/ARM/gem5.fast \\")
    script.puts("    --stats-file=#{filename}_stats.txt \\")
    script.puts("    configs/dramsim2/dramsim2_se.py \\")
    script.puts("    --cpu-type=#{cpu} \\")
    script.puts("    --caches \\")
    script.puts("    --l2cache \\")
    unless cacheSize == 0
        script.puts("    --l3cache \\")
        script.puts("    --l3_size=#{cacheSize}MB\\")
    end
    script.puts("   --fixaddr\\") if scheme == "fa"
    script.puts("    --fast-forward=#{$fastforward} \\")
    script.puts("    --fixaddr\\") if scheme == "fa"
    script.puts("    --maxinsts=#{$maxtinsts} \\")
    script.puts("    --maxtick=#{$maxtick} \\")
    script.puts("    --dramsim2 \\")
    script.puts("    --tpturnlength=#{tl0} \\") unless tl0==0 || diffperiod
    script.puts("    --devicecfg="+
                "./ext/DRAMSim2/ini/#{$device} \\")
    if tl0== 0
        script.puts("    --systemcfg=./ext/DRAMSim2/system_ft.ini \\")
    else
        script.puts("    --systemcfg=./ext/DRAMSim2/system_#{scheme}.ini \\")
    end
    script.puts("    --outputfile=/dev/null \\")
    script.puts("    --numpids=#{numpids} \\")
    script.puts("    --p0=#{$specinvoke[p0]}\\")
    script.puts("    --p1=#{$specinvoke[p1]}\\") unless p1.nil?
    script.puts("    --p2=#{$specinvoke[p2]}\\") unless p2.nil?
    script.puts("    --p3=#{$specinvoke[p3]}\\") unless p3.nil?
    if diffperiod
        script.puts("    --diffperiod \\")
        script.puts("    --p0period=#{tl0} \\")
        script.puts("    --p1period=#{tl1} \\")
    end
    script.puts("    > results/stdout_#{filename}.out")
    script_abspath = File.expand_path(script.path)
    script.close
    system "qsub -wd #{$gem5home.path} #{script_abspath}"
end

#------------------------------------------------------------------------------
# Unoptimized Runs
#------------------------------------------------------------------------------
#Cache Sweeping
Dir.chdir( specint_dir )
$cpus.product( $schemes,  $cacheSizes ).each do |cpu, scheme, cacheSize|
    $specint.product( $specint ).each do|p0, p1|
        sav_script( cpu, scheme, p0, {p1: p1} )
    end
end

#Turn Length Sweeping
Dir.chdir(specint_dir)
$cpus.product( $turnlengths ).each do |cpu, turnlength|
    $specint.product( $specint ).each do |p0,p1|
        sav_script( cpu, "tp", p0, {tl0: turnlength, p1: p1} )
    end
    $specint.each do |p0|
        sav_script( cpu, "tp", p0, {tl0: turnlength} )
    end
end

#Thread Scaling
$cpus = %w[ detailed ]
$cpus.product( $schemes ).each do |cpu, scheme|
    $specint.product( $specint ).each do |p0,other|
        sav_script( cpu, scheme, p0, {p1: other, p2: other} )
        sav_script( cpu, scheme, p0, {p1: other, p2: other, p3:other} )
    end
end

#------------------------------------------------------------------------------
# Optimized Runs
#------------------------------------------------------------------------------
$schemes = %w[fa tp]
$cpus = %w[ detailed timing ]

# This is a Hash of the form scheme -> model -> cache size -> benchmark -> mpki 
# saved to a file. It was generated using parsers/parse_mpki_spec
$mpkidata = Marshal.load( File.open $gem5home.path+"/mpki.rubyobj" )
$mpkidata = $mpkidata["none"]["detailed"][0]


$tester = [
    lambda { |r| r <= 1/4.0               },
    lambda { |r| r <= 1/3.0 && r >= 1/4.0 },
    lambda { |r| r <= 1/2.0 && r >= 1/3.0 },
    lambda { |r| r <= 2/3.0 && r >= 1/2.0 },
    lambda { |r| r <= 3/2.0 && r >= 2/3.0 },
    lambda { |r| r <=   2.0 && r >= 3/2.0 },
    lambda { |r| r <=   3.0 && r >=   2.0 },
    lambda { |r| r <=   4.0 && r >=   3.0 },
    lambda { |r|               r >=   4.0 },
]

$configs = {
    0 => [ 64,256],  
    1 => [ 64,192], 
    2 => [ 64,128], 
    3 => [ 64,96 ],  
    4 => [ 64,64 ],  
    5 => [ 96,64 ],  
    6 => [128,64 ],  
    7 => [192,64 ],  
    8 => [256,64 ],  
}

# This function takes two benchmarks and determines the best configuration of 
# periods based on the ratio of the Memory Accesses per Thousand Instructions 
# in p0 to that value in p1.
#
# First, the mpki of each benchmark is found from the loaded hash map. Then, 
# the ratio is computed and stored as a floating point value. The $tester.map 
# computes a new array of booleans where each element is the result of applying 
# the mpkir to the input of the original (lambda function) element in $tester. 
# The index function returns the index of the first true element which is used 
# as the index to configs. Configs is set up to return the appropriate 
# configuration as a pair [p0_turnlength, p1turnlength].
def get_turns( p0,p1 )
        mpki0 = $mpkidata[p0]["mpki"]
        mpki1 = $mpkidata[p1]["mpki"]
        mpkir = mpki0 / mpki1
        $configs[
            $tester.map{|test|
                test.call(mpkir)
            }.index(true)
        ]
end

#Thread Scaling
$cpus.product( $schemes ).each do |cpu, scheme|
    $specint.product( $specint ).each do |p0,other|
        tlp0, tlp1 = get_turns( p0, other )
        sav_script( cpu, scheme, p0,
           {diffperiod: true, tl0: tlp0, p1: other, tl1: tlp1 }
        )
        sav_script( cpu, scheme, p0,
           {diffperiod: true, tl0: tlp0, 
            p1: other, tl1: tlp1, p2: other, tl2: tlp1}
        )
        sav_script( cpu, scheme, p0,
           {diffperiod: true, tl0: tlp0, 
            p1: other, tl1: tlp1, p2: other, tl2: tlp1, p3: other, tl3: tlp1}
        )
    end
end

#Thread Scaling (Just FA)
$cpus.product( %w[fa] ).each do |cpu, scheme|
    $specint.product( $specint ).each do |p0,other|
        sav_script( cpu, scheme, p0, {p1: other} )
        sav_script( cpu, scheme, p0, {p1: other, p2: other} )
        sav_script( cpu, scheme, p0, {p1: other, p2: other, p3: other} )
    end
end

#------------------------------------------------------------------------------
# FCFS vs FR-FCFS
#------------------------------------------------------------------------------
$schemes_tmp = $schemes
$cpus_tmp= $cpus
$schemes = %w[frfcfs frfcfs_open]
$cpus = %w[detailed timing]

#Cache Sweeping
Dir.chdir( specint_dir )
$cpus.product( $schemes,  $cacheSizes ).each do |cpu, scheme, cacheSize|
    $specint.product( $specint ).each do|p0, p1|
        sav_script( cpu, scheme, p0, {p1: p1} )
    end
end

$schemes = $schemes_tmp
$cpus = $cpus_tmp
end 
